package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.DTOs.StudentResponseDTO;
import com.example.Student_Library_Management_System.DTOs.StudentUpdateMobNoDTO;
import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Exceptions.UserNotFoundException;
import com.example.Student_Library_Management_System.Models.Card;
import com.example.Student_Library_Management_System.Models.Student;
import com.example.Student_Library_Management_System.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static org.springframework.util.ClassUtils.isPresent;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository;



    public String addStudent(Student student) {

        //Student from the postman is already the basic attributes set.
        //check if the user is already present or not
       if(studentRepository.findByEmail(student.getEmail())!=null){
           return "User already exists";
       }
        //Card Should be autogenerated when createStudent function is called.
        Card card= new Card();
        card.setCardStatus(CardStatus.ACTIVATED); //Card status is being set.
        card.setStudent(student);

        //set the student
        student.setCard(card);

        //If there was a unidirectional mapping : we had to save both of them them
        //studentRepo.save () and cardRepo.save()
        //But we are super advance and are using bidirectional : Child will automatically be saved

        studentRepository.save(student);

        return "Student and card added successfully";

    }
    public StudentResponseDTO getStudent(int id) throws UserNotFoundException {
       Student student= studentRepository.findByUserId(id);
       if(student==null) throw new UserNotFoundException("User not found with id: "+id);
           StudentResponseDTO studentResponseDTO = StudentResponseDTO.builder().name(student.getName())
                   .age(student.getAge()).email(student.getEmail()).country(student.getCountry()).mobNo(student.getMobNo()).build();

       return studentResponseDTO;
    }

    public String getNameByEmail(String email) throws UserNotFoundException {
        Student student= studentRepository.findByEmail(email);
        if(student==null) throw new UserNotFoundException("User not found with email id: "+ email);
        return student.getName();
    }
    public String updateMobileNo(StudentUpdateMobNoDTO studentUpdateMobNoDTO) throws UserNotFoundException {
        if(studentRepository.findById(studentUpdateMobNoDTO.getId())==null) throw new UserNotFoundException("User not found with id: "+studentUpdateMobNoDTO.getId());
        Student student= studentRepository.findById(studentUpdateMobNoDTO.getId()).get();
        student.setMobNo(studentUpdateMobNoDTO.getMobNo());
        studentRepository.save(student);
        return "Mobile No updated successfully";
    }


}
